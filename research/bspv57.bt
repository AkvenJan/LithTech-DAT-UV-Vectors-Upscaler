struct LTUV {
    float u, v;
};

struct LTVector {
    float x, y, z;
};

struct LTQuaternion {
    float x, y, z, w;
};

struct LTString {
    short Length;
    char Value[Length];
};

typedef uint32 uint32_t;

// LT1 - v56
struct WorldHeader {
    uint32_t Version;
    uint32_t ObjectDataPosition;
    uint32_t RenderDataPosition;
};

struct WorldInfo {
    uint32_t Length;
    char Value[Length];
    float LMGridSize;
    int Padding[8];
};

struct WorldProp {
    short Unknown[4];
    uchar Padding;
    short PropNameLength;
    
    char PropName[PropNameLength];
};


struct WorldTexture (int NameLength) {
    char Name[NameLength];
};

//low=input & 0xff
//high=(input>>8) & 0xff
struct HighLowByte {
    uchar High;
    uchar Low;
};

struct Vertex {
/*
    union {
        HighLowByte SplitByte;
        ushort Bytes;
    } Bytes;
*/
    //ushort Count;
    uchar Count;
    uchar Extra;
};

struct LeafData {
    short PortalID;
    ushort Size;
    uchar Contents[Size];
};

struct Leaf {
    ushort LeafListCount;

    if (LeafListCount == 0xFFFF) {
        ushort LeafListIndex;
    } else {
        LeafData Data[LeafListCount]  <optimize=false>;
    }

    ushort PolygonCount;
    char Polygons[PolygonCount * 4] <optimize=false>;
    float Unk1;
};

struct Plane {
    LTVector Normal;
    float Distance;
};

struct Surface {
    LTVector UV1;
    LTVector UV2;
    LTVector UV3;

    LTVector UnkVec1;
    LTVector UnkVec2;
    LTVector UnkVec3;

    ushort Texture;
    int PlaneIndex;
    int Flags;
    uchar Unk2[4];  

    uchar UseEffects;
    if (UseEffects > 0) {
        LTString Effect;
        LTString EffectParam;
    }
    ushort TextureFlags;
};

struct Point {
    LTVector Data;
};

struct DiskVert {
    short Verts;
    uchar Dummy[3];
};

struct Polygon (Vertex &VertexInfo) {
    short LightmapWidth;
    short LightmapHeight;

    int Unknown1;
    int Unknown2;
    int SurfaceIndex;

    DiskVert Verts[VertexInfo.Count + VertexInfo.Extra];

};

struct Node {
    int Unknown;
    int PolyIndex;
    short LeafIndex;
    int NodeIndexes[2];
    LTQuaternion Unknown;
};

struct UserPortal {
    LTString Name;

    int Unk1;
    ushort Unk3;
    LTVector Center;
    LTVector Dims;
};

struct PBlockContents {
    uchar VertIndex;
    uchar Padding;
    uchar Quat[4];
};


struct PBlock {
    short Size;
    short Unk1;
    PBlockContents Contents[Size];
};

struct PBlockTable {
    int Unk1;
    int Unk2;
    int Unk3;

    local int Size = Unk1*Unk2*Unk3;
    
    LTVector Unk4;
    LTVector Unk5;
    PBlock Block[Size] <optimize=false>;
};

struct WorldBSP {

    int InfoFlags;
    LTString WorldName;

    int NextPosition;
    int PointCount; 
    int PlaneCount;
    int SurfaceCount;
    int UserPortalCount;
    int PolyCount;
    int LeafCount;
    int VertCount;
    int TotalVisListSize;
    int LeafListCount;
    int NodeCount;
    
    int Unknown2;
    
    LTVector MinBox;
    LTVector MaxBox;
    LTVector WorldTranslation;
    
    int TextureNameLength;
    int TextureCount;

    WorldTexture WorldTextures(TextureNameLength);
    Vertex Vertices[PolyCount];

    Leaf LeafList[LeafCount] <optimize=false>;
    
    Plane Planes[PlaneCount];
    Surface Surfaces[SurfaceCount] <optimize=false>;
    

    local int i = 0;
    for (i = 0; i < PolyCount; i++) {
        Polygon Poly(Vertices[i]);
    }

    Node Nodes[NodeCount];
    UserPortal Portals[UserPortalCount] <optimize=false>;
    Point Points[PointCount];
    PBlockTable BlockTable;
    int RootNodeIndex;


    int UnknownCount;

    LTVector PolygonList[PolyCount];

    int LightmapDataCount;
    uchar LightmapData[LightmapDataCount];
};

struct WorldModel {
    int NextSection;
    int Padding[8];
    WorldBSP BSPData;
};

struct WorldModelHeader {
    
    
    //short Padding2;
    WorldModel rootModel;

    int Count;
    WorldModel model[Count] <optimize=false>;
};


struct WorldTreeNode {
  int Children;
    
};
/*
    {  PT_STRING = 0;
     PT_VECTOR = 1;
     PT_COLOR = 2;
     PT_REAL = 3;
     PT_FLAGS = 4;
     PT_BOOL = 5;
     PT_LONGINT = 6;
     PT_ROTATION = 7;  } 
*/
struct ObjectProperty {
    LTString Name;
    char Code;
    int Flags;
    short DataLength;
    
    switch(Code) {
        case 0: // String
        LTString Value;
        break;
        case 1: // Vector
        case 2: // Color
        LTVector Value;
        break;
        case 3: // Float
        float Value;
        break;
        case 5: // Bool
        char Value;
        break;
        case 4: // Flags
        case 6: // Long Int
        case 9: // ??? Psycho
        uint Value;
        break;
        case 7: // Rotation
        LTQuaternion Value;
        
        break;
    };
};

struct WorldObject {
    ushort DataLength;
    LTString TypeString;
    int PropertyCount;
    ObjectProperty Properties[PropertyCount] <optimize=false>;
};

struct WorldObjectHeader {
    int Count;
    WorldObject objects[Count] <optimize=false>;
};

WorldHeader header;
WorldInfo info;

WorldObjectHeader objectHeader;

WorldModelHeader modelHeader;